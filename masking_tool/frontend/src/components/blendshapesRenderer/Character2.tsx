/**
 * Copyright 2023 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.1.4 public/Doggo07.glb -t
*/
import * as THREE from 'three'
import React, { useEffect, useRef, useState } from 'react'
import { useGLTF, useAnimations } from '@react-three/drei'
import { useFrame, useGraph } from '@react-three/fiber';
import { GLTF } from 'three-stdlib'
import { AnimationAction } from 'three';
import Api from '../../api';
import initalblendshapes from "./blendshapes.json"

interface Blendshapes {
  [name: string]: number;
}

type GLTFResult = GLTF & {
  nodes: {
    Mesh: THREE.Mesh
    Mesh_1: THREE.Mesh
    Mesh_2: THREE.Mesh
    Mesh_3: THREE.Mesh
    Mesh_4: THREE.Mesh
    Mesh_5: THREE.Mesh
  }
  materials: {
    HAIR_SHD: THREE.MeshStandardMaterial
    GLASSES_SHD: THREE.MeshStandardMaterial
    DR_SHD: THREE.MeshStandardMaterial
    body_SHD: THREE.MeshStandardMaterial
    eye_SHD: THREE.MeshStandardMaterial
    eyelash_SHD: THREE.MeshStandardMaterial
  }
}
type ActionName = 'Expression' | 'KeyAction' | 'HeadMovement' | 'BodyAction'
type GLTFActions = Record<ActionName, THREE.AnimationAction>
function updateBlendshapes(node: any, blendshapes: any) {
  if (!node.morphTargetDictionary) {
    return;
  }
  if (!node.morphTargetInfluences) {
    return;
  }
  let found = 0
  for (const name in blendshapes) {
    const value = blendshapes[name];
    if (!Object.keys(node.morphTargetDictionary).includes(name)) {
      continue;
    }
    found = found + 1
    const idx = node.morphTargetDictionary[name];
    node.morphTargetInfluences[idx] = value;
  }
} 

export function Character(props: JSX.IntrinsicElements['group']) {
  const [blendshapes, setBlendshapes] = useState<any>(initalblendshapes)
  const [frameIndex, setFrameIndex] = useState(0)
  const { scene } = useGLTF("https://models.readyplayer.me/6460d95f9ae10f45bffb2864.glb?morphTargets=ARKit&textureAtlas=1024")
  const { nodes } = useGraph(scene);

  const headMesh: any = (nodes.Wolf3D_Head || nodes.Wolf3D_Avatar || nodes.Wolf3D_Head_Custom);
  let count = 0

 useEffect(()=>{
    setInterval(() => {
        console.log(count)
      updateBlendshapes(headMesh, blendshapes[count]);
      count = count + 1
    }, 50);
  }, [nodes]);

  return (
    <>
    <primitive object={scene} position={[0, -1.75, 3]} />
    </>
  )
}